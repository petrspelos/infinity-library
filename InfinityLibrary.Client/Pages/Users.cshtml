@using System.Net
@using InfinityLibrary.Entities
@using InfinityLibrary.Shared
@using SimpleJson
@inject HttpClient Http
@page "/users"

<p>Users</p>

<a class="btn btn-success" href="AddUser" role="button"><span class="oi oi-plus" aria-hidden="true"></span> Add new user</a>
@if (FoundUsers is null)
{
    <p>Loading</p>
}
else
{
    <div class="list-group">
        @foreach (var user in FoundUsers)
        {
            <div class="list-group-item list-group-item-action flex-column align-items-start">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@user.FirstName @user.LastName</h5>
                    <small>@user.Email</small>
                </div>
                <div class="d-flex w-100 justify-content-between">
                    <p class="mb-1">@user.DateOfBirth.ToShortDateString()<br/>@user.Address</p>
                    <div>
                        <a href="userdetail/@user.Id" role="button" class="btn btn-secondary">Details</a>
                        <button class="btn btn-primary">Edit</button>
                        <button class="btn btn-danger" onclick="@(() => DeleteUser(user.Id))">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@functions
{

    protected User[] FoundUsers { get; set; }

    protected override async Task OnInitAsync()
    {
        var usersJson = await Http.GetStringAsync("api/Users");
        FoundUsers = SimpleJson.DeserializeObject<User[]>(usersJson, new UserSerializationStrategy());
    }

    private async void DeleteUser(long userId)
    {
        var response = await Http.DeleteAsync($"api/Users/{userId}");

        if(response.IsSuccessStatusCode)
        {
            FoundUsers = FoundUsers.Where(u => u.Id != userId).ToArray();
            StateHasChanged();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Console.WriteLine("User has reservations");
        }
    }
}
