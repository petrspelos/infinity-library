@using InfinityLibrary.Entities
@using InfinityLibrary.Shared
@using SimpleJson
@inject HttpClient Http
@page "/"

<CascadingValue Value="Users">
    <EntitySelector ref="UsersDropdown"></EntitySelector>
</CascadingValue>

<CascadingValue Value="Books">
    <EntitySelector ref="BooksDropdown"></EntitySelector>
</CascadingValue>

@if (Books is null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var book in Books)
        {
            <hr />
            <li>
                <img src="@((book.ThumbnailUrl == "None") ? MissingImageUrl : book.ThumbnailUrl)" height="100" width="80" />
                <b>@book.Title</b> by @book.Author
            </li>
        }
    </ul>
}

@functions
{
    
    protected User[] Users { get; set; }
    protected Book[] Books { get; set; }

    private EntitySelector UsersDropdown { get; set; }
    private EntitySelector BooksDropdown { get; set; }

    private string MissingImageUrl = "https://pbs.twimg.com/profile_images/600060188872155136/st4Sp6Aw_400x400.jpg";

    protected override async Task OnInitAsync()
    {
        var usersJson = await Http.GetStringAsync("api/Users");
        Users = SimpleJson.DeserializeObject<User[]>(usersJson, new UserSerializationStrategy());

        var booksJson = await Http.GetStringAsync("api/Books");
        Books = SimpleJson.DeserializeObject<Book[]>(booksJson, new BookSerializationStrategy());
    }

}
