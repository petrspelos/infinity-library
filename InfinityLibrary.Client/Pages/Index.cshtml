@inject HttpClient Http
@page "/"
@using System.Net


@if (Books is null)
{
    <p>Loading...</p>
}
else
{
    <a class="btn btn-success mb-3" href="AddBook" role="button"><span class="oi oi-plus" aria-hidden="true"></span> Add new book</a>
    <div class="list-group">
        @foreach (var book in Books)
        {
            <a href="#" class="list-group-item list-group-item-action flex-row align-items-stretch d-flex">
                <div class="d-flex justify-content-center align-content-center w-25">
                    <img src="@((book.ThumbnailUrl == "None") ? MissingImageUrl : book.ThumbnailUrl)" height="100" width="80" />
                </div>
                <div class="d-flex justify-content-between align-items-center w-75">
                    <h5 class="mb-1" style="max-width: 70%"><b>@book.Title</b> by @book.Author</h5>
                    <div>
                        <a href="bookdetail/@book.Id" role="button" class="btn btn-primary">Details</a>
                        <button class="btn btn-danger" onclick="@(() => DeleteBook(book.Id))">Delete</button>
                    </div>
                </div>
            </a>
        }
    </div>
}

@functions
{

    protected Book[] Books { get; set; }

    private string MissingImageUrl = "https://pbs.twimg.com/profile_images/600060188872155136/st4Sp6Aw_400x400.jpg";

    protected override async Task OnInitAsync()
    {
        var booksJson = await Http.GetStringAsync("api/Books");
        Books = SimpleJson.DeserializeObject<Book[]>(booksJson, new BookSerializationStrategy());
    }

    private async void DeleteBook(long bookId)
    {
        var response = await Http.DeleteAsync($"api/Books/{bookId}");

        if (response.IsSuccessStatusCode)
        {
            Books = Books.Where(u => u.Id != bookId).ToArray();
            StateHasChanged();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Console.WriteLine("Book is reserved");
        }
    }
}
