@page "/AddReservation"
@inject HttpClient Http

<p>New Reservation form</p>

@if (State == PageState.Loading)
{
    <p>Loading...</p>
}
else if (State == PageState.Error)
{
    <p>Sorry, there was an error with your request.</p>
}
else
{
    <div class="fullscreen d-flex justify-content-center align-items-center" style="visibility: @(ErrorVisible ? "visible" : "hidden");">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Whops</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="@(() => ErrorVisible = false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Something went wrong with your request.</p>
                    <p>It is possible that the user you're trying to rent a book to does not have a valid membership.</p>
                    <p>It is possible that the book you're trying to rent does not have any more copies.</p>
                    <p>Please refresh the page and try again in a little bit.</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="alert alert-primary" role="alert">
        Users without membership and books that we're out of copies for are not displayed.
    </div>

    <form class="was-validated" method="post" action="api/Reservations">
        <div class="form-row">
            <div class="form-group col-md-6 pr-2">
                <h5>User</h5>
                <CascadingValue Value="Users">
                    <EntitySelector ref="UsersDropdown" ControlNameAndId="UserId"></EntitySelector>
                </CascadingValue>
            </div>
            <div class="form-group col-md-6 pl-2">
                <h5>Book</h5>
                <CascadingValue Value="Books">
                    <EntitySelector ref="BooksDropdown" ControlNameAndId="BookId"></EntitySelector>
                </CascadingValue>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </form>
}

@functions
{
private PageState State { get; set; }
protected User[] Users { get; set; }
protected Book[] Books { get; set; }
private EntitySelector UsersDropdown { get; set; }
private EntitySelector BooksDropdown { get; set; }
private bool ErrorVisible;

protected override async Task OnInitAsync()
{
    State = PageState.Loading;

    try
    {
        var usersJson = await Http.GetStringAsync("api/Users/WithMembership");
        Users = SimpleJson.DeserializeObject<User[]>(usersJson, new UserSerializationStrategy());

        var booksJson = await Http.GetStringAsync("api/Books/Rentable");
        Books = SimpleJson.DeserializeObject<Book[]>(booksJson, new BookSerializationStrategy());

        State = PageState.Ready;
    }
    catch (Exception)
    {
        ErrorVisible = true;
        State = PageState.Error;
    }
}

private enum PageState
{
    Loading = 0,
    Ready = 1,
    Error = 2
}
}
